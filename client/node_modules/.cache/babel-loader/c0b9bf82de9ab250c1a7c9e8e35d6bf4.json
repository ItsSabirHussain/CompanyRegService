{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _TableCell = _interopRequireDefault(require(\"@material-ui/core/TableCell\"));\n\nvar _TableRow = _interopRequireDefault(require(\"@material-ui/core/TableRow\"));\n\nvar _IconButton = _interopRequireDefault(require(\"@material-ui/core/IconButton\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n/* eslint-disable no-unused-vars */\n\n/* eslint-enable no-unused-vars */\n\n\nvar MTableGroupRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2[\"default\"])(MTableGroupRow, _React$Component);\n\n  function MTableGroupRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, MTableGroupRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(MTableGroupRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"rotateIconStyle\", function (isOpen) {\n      return {\n        transform: isOpen ? 'rotate(90deg)' : 'none'\n      };\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(MTableGroupRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var colSpan = this.props.columns.filter(function (columnDef) {\n        return !columnDef.hidden;\n      }).length;\n      this.props.options.selection && colSpan++;\n      this.props.detailPanel && colSpan++;\n      this.props.actions && this.props.actions.length > 0 && colSpan++;\n      var column = this.props.groups[this.props.level];\n      var detail;\n\n      if (this.props.groupData.isExpanded) {\n        if (this.props.groups.length > this.props.level + 1) {\n          // Is there another group\n          detail = this.props.groupData.groups.map(function (groupData, index) {\n            return React.createElement(_this2.props.components.GroupRow, {\n              actions: _this2.props.actions,\n              key: groupData.value || \"\" + index,\n              columns: _this2.props.columns,\n              components: _this2.props.components,\n              detailPanel: _this2.props.detailPanel,\n              getFieldValue: _this2.props.getFieldValue,\n              groupData: groupData,\n              groups: _this2.props.groups,\n              icons: _this2.props.icons,\n              level: _this2.props.level + 1,\n              path: [].concat((0, _toConsumableArray2[\"default\"])(_this2.props.path), [index]),\n              onGroupExpandChanged: _this2.props.onGroupExpandChanged,\n              onRowSelected: _this2.props.onRowSelected,\n              onRowClick: _this2.props.onRowClick,\n              onToggleDetailPanel: _this2.props.onToggleDetailPanel,\n              onTreeExpandChanged: _this2.props.onTreeExpandChanged,\n              onEditingCanceled: _this2.props.onEditingCanceled,\n              onEditingApproved: _this2.props.onEditingApproved,\n              options: _this2.props.options,\n              hasAnyEditingRow: _this2.props.hasAnyEditingRow,\n              isTreeData: _this2.props.isTreeData\n            });\n          });\n        } else {\n          detail = this.props.groupData.data.map(function (rowData, index) {\n            if (rowData.tableData.editing) {\n              return React.createElement(_this2.props.components.EditRow, {\n                columns: _this2.props.columns,\n                components: _this2.props.components,\n                data: rowData,\n                icons: _this2.props.icons,\n                path: [].concat((0, _toConsumableArray2[\"default\"])(_this2.props.path), [index]),\n                localization: _this2.props.localization,\n                key: index,\n                mode: rowData.tableData.editing,\n                options: _this2.props.options,\n                isTreeData: _this2.props.isTreeData,\n                detailPanel: _this2.props.detailPanel,\n                onEditingCanceled: _this2.props.onEditingCanceled,\n                onEditingApproved: _this2.props.onEditingApproved,\n                getFieldValue: _this2.props.getFieldValue\n              });\n            } else {\n              return React.createElement(_this2.props.components.Row, {\n                actions: _this2.props.actions,\n                key: index,\n                columns: _this2.props.columns,\n                components: _this2.props.components,\n                data: rowData,\n                detailPanel: _this2.props.detailPanel,\n                getFieldValue: _this2.props.getFieldValue,\n                icons: _this2.props.icons,\n                path: [].concat((0, _toConsumableArray2[\"default\"])(_this2.props.path), [index]),\n                onRowSelected: _this2.props.onRowSelected,\n                onRowClick: _this2.props.onRowClick,\n                onToggleDetailPanel: _this2.props.onToggleDetailPanel,\n                options: _this2.props.options,\n                isTreeData: _this2.props.isTreeData,\n                onTreeExpandChanged: _this2.props.onTreeExpandChanged,\n                onEditingCanceled: _this2.props.onEditingCanceled,\n                onEditingApproved: _this2.props.onEditingApproved,\n                hasAnyEditingRow: _this2.props.hasAnyEditingRow\n              });\n            }\n          });\n        }\n      }\n\n      var freeCells = [];\n\n      for (var i = 0; i < this.props.level; i++) {\n        freeCells.push(React.createElement(_TableCell[\"default\"], {\n          padding: \"checkbox\",\n          key: i\n        }));\n      }\n\n      var value = this.props.groupData.value;\n\n      if (column.lookup) {\n        value = column.lookup[value];\n      }\n\n      var title = column.title;\n\n      if (typeof title !== \"string\") {\n        title = React.cloneElement(title);\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(_TableRow[\"default\"], null, freeCells, React.createElement(this.props.components.Cell, {\n        colSpan: colSpan,\n        padding: \"none\",\n        columnDef: column,\n        value: value,\n        icons: this.props.icons\n      }, React.createElement(_IconButton[\"default\"], {\n        style: (0, _objectSpread2[\"default\"])({\n          transition: 'all ease 200ms'\n        }, this.rotateIconStyle(this.props.groupData.isExpanded)),\n        onClick: function onClick(event) {\n          _this2.props.onGroupExpandChanged(_this2.props.path);\n        }\n      }, React.createElement(this.props.icons.DetailPanel, null)), React.createElement(\"b\", null, title, \": \"))), detail);\n    }\n  }]);\n  return MTableGroupRow;\n}(React.Component);\n\nexports[\"default\"] = MTableGroupRow;\nMTableGroupRow.defaultProps = {\n  columns: [],\n  groups: [],\n  options: {},\n  level: 0\n};\nMTableGroupRow.propTypes = {\n  actions: _propTypes[\"default\"].array,\n  columns: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object),\n  components: _propTypes[\"default\"].object,\n  detailPanel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].func, _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object)]),\n  getFieldValue: _propTypes[\"default\"].func,\n  groupData: _propTypes[\"default\"].object,\n  groups: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object),\n  hasAnyEditingRow: _propTypes[\"default\"].bool,\n  icons: _propTypes[\"default\"].object,\n  isTreeData: _propTypes[\"default\"].bool.isRequired,\n  level: _propTypes[\"default\"].number,\n  localization: _propTypes[\"default\"].object,\n  onGroupExpandChanged: _propTypes[\"default\"].func,\n  onRowSelected: _propTypes[\"default\"].func,\n  onRowClick: _propTypes[\"default\"].func,\n  onToggleDetailPanel: _propTypes[\"default\"].func.isRequired,\n  onTreeExpandChanged: _propTypes[\"default\"].func.isRequired,\n  onEditingCanceled: _propTypes[\"default\"].func,\n  onEditingApproved: _propTypes[\"default\"].func,\n  options: _propTypes[\"default\"].object,\n  path: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].number)\n};","map":null,"metadata":{},"sourceType":"script"}