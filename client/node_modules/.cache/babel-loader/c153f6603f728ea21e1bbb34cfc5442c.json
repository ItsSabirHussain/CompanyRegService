{"ast":null,"code":"var express = require(\"express\");\n\nvar router = express.Router();\n\nvar bcrypt = require(\"bcryptjs\");\n\nvar jwt = require(\"jsonwebtoken\");\n\nvar keys = require(\"../config/keys\"); // Load input validation\n\n\nvar validateCEORegistration = require(\"../validation/ceoreg\");\n\nvar validateCEOLogin = require(\"../validation/ceologin\"); // Load User model\n\n\nvar CEO = require(\"../models/ceo\");\n\nvar Notification = require(\"../models/notifications\"); // @route POST /adminregisteration\n// @desc Register user\n// @access Public\n\n\nrouter.post(\"/ceoreg\", function (req, res) {\n  // Form validation\n  var _validateCEORegistrat = validateCEORegistration(req.body),\n      errors = _validateCEORegistrat.errors,\n      isValid = _validateCEORegistrat.isValid; // Check validation\n\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  CEO.findOne({\n    ID: req.body.ID\n  }).then(function (ceo) {\n    console.log(ceo);\n\n    if (ceo) {\n      return res.status(400).json({\n        ID: \"ID already exists\"\n      });\n    } else {\n      var newCEO = new CEO({\n        FullName: req.body.FullName,\n        OfficeID: req.body.OfficeID,\n        ID: req.body.ID,\n        Key: req.body.Key\n      }); // Hash key before saving in database\n\n      bcrypt.genSalt(10, function (err, salt) {\n        console.log(req.body.Key);\n        bcrypt.hash(newCEO.Key, salt, function (err, hash) {\n          console.log(err);\n          console.log(req.body.Key);\n          if (err) throw err;\n          newCEO.Key = hash;\n          newCEO.save().then(function (ceo) {\n            return res.json(newCEO);\n          }).catch(function (err) {\n            return console.log(err);\n          });\n        });\n      });\n    }\n  });\n}); // @route POST /adminlogin\n// @desc Login admin and return JWT token\n// @access Public\n\nrouter.post(\"/ceologin\", function (req, res) {\n  // Form validation\n  var _validateCEOLogin = validateCEOLogin(req.body),\n      errors = _validateCEOLogin.errors,\n      isValid = _validateCEOLogin.isValid; // Check validation\n\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  var ID = req.body.ID;\n  var Key = req.body.Key; // Find admin by id\n\n  CEO.findOne({\n    ID: req.body.ID\n  }).then(function (ceo) {\n    // Check if admin exists\n    if (!ceo) {\n      return res.status(404).json({\n        IDNotFound: \"ID not found\"\n      });\n    } // Check password\n\n\n    bcrypt.compare(Key, ceo.Key).then(function (isMatch) {\n      if (isMatch) {\n        // Admin matched\n        // Create JWT Payload\n        var payload = {\n          id: ceo.id,\n          ID: ceo.ID\n        }; // Sign token\n\n        jwt.sign(payload, keys.secretOrKey, {\n          expiresIn: 31556926 // 1 year in seconds\n\n        }, function (err, token) {\n          res.json({\n            success: true,\n            token: \"Bearer \" + token\n          });\n        });\n      } else {\n        return res.status(400).json({\n          passwordincorrect: \"Key incorrect\"\n        });\n      }\n    });\n  });\n});\nrouter.post(\"/getceo\", function (req, res) {\n  var ID = req.body.ID;\n  console.log(ID);\n  CEO.findOne({\n    ID: req.body.ID\n  }).then(function (user) {\n    if (!user) {\n      return res.status(404).json({\n        IDNotFound: \"ID not found\"\n      });\n    }\n\n    return res.json(user);\n  });\n});\nrouter.post(\"/getcnotifications\", function (req, res) {\n  Notification.find().then(function (noti) {\n    if (noti) {\n      return res.json(noti);\n    } else {\n      return res.json({\n        ID: \"None\",\n        ProjectName: \"None\",\n        CompanyName: \"None\",\n        Content: \"None\"\n      });\n    }\n  }).catch(function (err) {\n    res.json({\n      message: \"Error\"\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/sabirhussain/Desktop/Work/Website Probject/Tajindr Dev/Tej Development/client/src/components/ceodashboard/projectanalysis.js"],"names":["express","require","router","Router","bcrypt","jwt","keys","validateCEORegistration","validateCEOLogin","CEO","Notification","post","req","res","body","errors","isValid","status","json","findOne","ID","then","ceo","console","log","newCEO","FullName","OfficeID","Key","genSalt","err","salt","hash","save","catch","IDNotFound","compare","isMatch","payload","id","sign","secretOrKey","expiresIn","token","success","passwordincorrect","user","find","noti","ProjectName","CompanyName","Content","message","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst keys = require(\"../config/keys\");\n\n// Load input validation\nconst validateCEORegistration = require(\"../validation/ceoreg\");\nconst validateCEOLogin = require(\"../validation/ceologin\");\n\n// Load User model\nconst CEO = require(\"../models/ceo\");\nconst Notification = require(\"../models/notifications\");\n\n// @route POST /adminregisteration\n// @desc Register user\n// @access Public\nrouter.post(\"/ceoreg\", (req, res) => {\n  // Form validation\n  const { errors, isValid } = validateCEORegistration(req.body);\n  // Check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  CEO.findOne({ ID: req.body.ID }).then(ceo => {\n    console.log(ceo);\n    if (ceo) {\n      return res.status(400).json({ ID: \"ID already exists\" });\n    } else {\n      const newCEO = new CEO({\n        FullName: req.body.FullName,\n        OfficeID: req.body.OfficeID,\n        ID: req.body.ID,\n        Key: req.body.Key\n      });\n      // Hash key before saving in database\n      bcrypt.genSalt(10, (err, salt) => {\n        console.log(req.body.Key);\n\n        bcrypt.hash(newCEO.Key, salt, (err, hash) => {\n          console.log(err);\n          console.log(req.body.Key);\n\n          if (err) throw err;\n          newCEO.Key = hash;\n          newCEO\n            .save()\n            .then(ceo => res.json(newCEO))\n            .catch(err => console.log(err));\n        });\n      });\n    }\n  });\n});\n\n// @route POST /adminlogin\n// @desc Login admin and return JWT token\n// @access Public\nrouter.post(\"/ceologin\", (req, res) => {\n  // Form validation\n  const { errors, isValid } = validateCEOLogin(req.body);\n  // Check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n  const ID = req.body.ID;\n  const Key = req.body.Key;\n  // Find admin by id\n  CEO.findOne({ ID: req.body.ID }).then(ceo => {\n    // Check if admin exists\n    if (!ceo) {\n      return res.status(404).json({ IDNotFound: \"ID not found\" });\n    }\n    // Check password\n    bcrypt.compare(Key, ceo.Key).then(isMatch => {\n      if (isMatch) {\n        // Admin matched\n        // Create JWT Payload\n        const payload = {\n          id: ceo.id,\n          ID: ceo.ID\n        };\n        // Sign token\n        jwt.sign(\n          payload,\n          keys.secretOrKey,\n          {\n            expiresIn: 31556926 // 1 year in seconds\n          },\n          (err, token) => {\n            res.json({\n              success: true,\n              token: \"Bearer \" + token\n            });\n          }\n        );\n      } else {\n        return res.status(400).json({ passwordincorrect: \"Key incorrect\" });\n      }\n    });\n  });\n});\n\nrouter.post(\"/getceo\", (req, res) => {\n  const ID = req.body.ID;\n  console.log(ID);\n\n  CEO.findOne({ ID: req.body.ID }).then(user => {\n    if (!user) {\n      return res.status(404).json({ IDNotFound: \"ID not found\" });\n    }\n    return res.json(user);\n  });\n});\n\nrouter.post(\"/getcnotifications\", (req, res) => {\n  Notification.find()\n    .then(noti => {\n      if (noti) {\n        return res.json(noti);\n      } else {\n        return res.json({\n          ID: \"None\",\n          ProjectName: \"None\",\n          CompanyName: \"None\",\n          Content: \"None\"\n        });\n      }\n    })\n    .catch(err => {\n      res.json({ message: \"Error\" });\n    });\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"module"}