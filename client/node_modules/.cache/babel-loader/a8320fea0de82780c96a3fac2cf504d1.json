{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _TableBody = _interopRequireDefault(require(\"@material-ui/core/TableBody\"));\n\nvar _TableCell = _interopRequireDefault(require(\"@material-ui/core/TableCell\"));\n\nvar _TableRow = _interopRequireDefault(require(\"@material-ui/core/TableRow\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n/* eslint-disable no-unused-vars */\n\n/* eslint-enable no-unused-vars */\n\n\nvar MTableBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2[\"default\"])(MTableBody, _React$Component);\n\n  function MTableBody() {\n    (0, _classCallCheck2[\"default\"])(this, MTableBody);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(MTableBody).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(MTableBody, [{\n    key: \"renderEmpty\",\n    value: function renderEmpty(emptyRowCount, renderData) {\n      var _this = this;\n\n      var rowHeight = this.props.options.padding === 'default' ? 49 : 36;\n      var localization = (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization, this.props.localization);\n\n      if (this.props.options.showEmptyDataSourceMessage && renderData.length === 0) {\n        var addColumn = 0;\n\n        if (this.props.options.selection || this.props.actions && this.props.actions.filter(function (a) {\n          return !a.isFreeAction && !_this.props.options.selection;\n        }).length > 0) {\n          addColumn++;\n        }\n\n        if (this.props.hasDetailPanel) {\n          addColumn++;\n        }\n\n        if (this.props.isTreeData) {\n          addColumn++;\n        }\n\n        return React.createElement(_TableRow[\"default\"], {\n          style: {\n            height: rowHeight * (this.props.options.paging && this.props.options.emptyRowsWhenPaging ? this.props.pageSize : 1)\n          },\n          key: 'empty-' + 0\n        }, React.createElement(_TableCell[\"default\"], {\n          style: {\n            paddingTop: 0,\n            paddingBottom: 0,\n            textAlign: 'center'\n          },\n          colSpan: this.props.columns.length + addColumn,\n          key: \"empty-\"\n        }, localization.emptyDataSourceMessage));\n      } else if (this.props.options.emptyRowsWhenPaging) {\n        return React.createElement(React.Fragment, null, (0, _toConsumableArray2[\"default\"])(Array(emptyRowCount)).map(function (r, index) {\n          return React.createElement(_TableRow[\"default\"], {\n            style: {\n              height: rowHeight\n            },\n            key: 'empty-' + index\n          });\n        }), emptyRowCount > 0 && React.createElement(_TableRow[\"default\"], {\n          style: {\n            height: 1\n          },\n          key: 'empty-last1'\n        }));\n      }\n    }\n  }, {\n    key: \"renderUngroupedRows\",\n    value: function renderUngroupedRows(renderData) {\n      var _this2 = this;\n\n      return renderData.map(function (data, index) {\n        if (data.tableData.editing) {\n          return React.createElement(_this2.props.components.EditRow, {\n            columns: _this2.props.columns.filter(function (columnDef) {\n              return !columnDef.hidden;\n            }),\n            components: _this2.props.components,\n            data: data,\n            icons: _this2.props.icons,\n            localization: (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization.editRow, _this2.props.localization.editRow),\n            key: index,\n            mode: data.tableData.editing,\n            options: _this2.props.options,\n            isTreeData: _this2.props.isTreeData,\n            detailPanel: _this2.props.detailPanel,\n            onEditingCanceled: _this2.props.onEditingCanceled,\n            onEditingApproved: _this2.props.onEditingApproved,\n            getFieldValue: _this2.props.getFieldValue\n          });\n        } else {\n          return React.createElement(_this2.props.components.Row, {\n            components: _this2.props.components,\n            icons: _this2.props.icons,\n            data: data,\n            index: index,\n            key: \"row-\" + data.tableData.id,\n            level: 0,\n            options: _this2.props.options,\n            localization: (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization.editRow, _this2.props.localization.editRow),\n            onRowSelected: _this2.props.onRowSelected,\n            actions: _this2.props.actions,\n            columns: _this2.props.columns,\n            getFieldValue: _this2.props.getFieldValue,\n            detailPanel: _this2.props.detailPanel,\n            path: [index + _this2.props.pageSize * _this2.props.currentPage],\n            onToggleDetailPanel: _this2.props.onToggleDetailPanel,\n            onRowClick: _this2.props.onRowClick,\n            isTreeData: _this2.props.isTreeData,\n            onTreeExpandChanged: _this2.props.onTreeExpandChanged,\n            onEditingCanceled: _this2.props.onEditingCanceled,\n            onEditingApproved: _this2.props.onEditingApproved,\n            hasAnyEditingRow: _this2.props.hasAnyEditingRow,\n            treeDataMaxLevel: _this2.props.treeDataMaxLevel\n          });\n        }\n      });\n    }\n  }, {\n    key: \"renderGroupedRows\",\n    value: function renderGroupedRows(groups, renderData) {\n      var _this3 = this;\n\n      return renderData.map(function (groupData, index) {\n        return React.createElement(_this3.props.components.GroupRow, {\n          actions: _this3.props.actions,\n          key: groupData.value == null ? '' + index : groupData.value,\n          columns: _this3.props.columns,\n          components: _this3.props.components,\n          detailPanel: _this3.props.detailPanel,\n          getFieldValue: _this3.props.getFieldValue,\n          groupData: groupData,\n          groups: groups,\n          icons: _this3.props.icons,\n          level: 0,\n          path: [index + _this3.props.pageSize * _this3.props.currentPage],\n          onGroupExpandChanged: _this3.props.onGroupExpandChanged,\n          onRowSelected: _this3.props.onRowSelected,\n          onRowClick: _this3.props.onRowClick,\n          onEditingCanceled: _this3.props.onEditingCanceled,\n          onEditingApproved: _this3.props.onEditingApproved,\n          onToggleDetailPanel: _this3.props.onToggleDetailPanel,\n          onTreeExpandChanged: _this3.props.onTreeExpandChanged,\n          options: _this3.props.options,\n          isTreeData: _this3.props.isTreeData,\n          hasAnyEditingRow: _this3.props.hasAnyEditingRow,\n          localization: (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization.editRow, _this3.props.localization.editRow)\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var renderData = this.props.renderData;\n      var groups = this.props.columns.filter(function (col) {\n        return col.tableData.groupOrder > -1;\n      }).sort(function (col1, col2) {\n        return col1.tableData.groupOrder - col2.tableData.groupOrder;\n      });\n      var emptyRowCount = 0;\n\n      if (this.props.options.paging) {\n        emptyRowCount = this.props.pageSize - renderData.length;\n      }\n\n      return React.createElement(_TableBody[\"default\"], null, this.props.options.filtering && React.createElement(this.props.components.FilterRow, {\n        columns: this.props.columns.filter(function (columnDef) {\n          return !columnDef.hidden;\n        }),\n        icons: this.props.icons,\n        emptyCell: this.props.options.selection || this.props.actions && this.props.actions.filter(function (a) {\n          return !a.isFreeAction && !_this4.props.options.selection;\n        }).length > 0,\n        hasActions: this.props.actions && this.props.actions.filter(function (a) {\n          return !a.isFreeAction && !_this4.props.options.selection;\n        }).length > 0,\n        actionsColumnIndex: this.props.options.actionsColumnIndex,\n        onFilterChanged: this.props.onFilterChanged,\n        selection: this.props.options.selection,\n        localization: (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization.filterRow, this.props.localization.filterRow),\n        hasDetailPanel: !!this.props.detailPanel,\n        isTreeData: this.props.isTreeData,\n        filterCellStyle: this.props.options.filterCellStyle\n      }), this.props.showAddRow && this.props.options.addRowPosition === \"first\" && React.createElement(this.props.components.EditRow, {\n        columns: this.props.columns.filter(function (columnDef) {\n          return !columnDef.hidden;\n        }),\n        data: this.props.initialFormData,\n        components: this.props.components,\n        icons: this.props.icons,\n        key: \"key-add-row\",\n        mode: \"add\",\n        localization: (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization.editRow, this.props.localization.editRow),\n        options: this.props.options,\n        isTreeData: this.props.isTreeData,\n        detailPanel: this.props.detailPanel,\n        onEditingCanceled: this.props.onEditingCanceled,\n        onEditingApproved: this.props.onEditingApproved,\n        getFieldValue: this.props.getFieldValue\n      }), groups.length > 0 ? this.renderGroupedRows(groups, renderData) : this.renderUngroupedRows(renderData), this.props.showAddRow && this.props.options.addRowPosition === \"last\" && React.createElement(this.props.components.EditRow, {\n        columns: this.props.columns.filter(function (columnDef) {\n          return !columnDef.hidden;\n        }),\n        data: this.props.initialFormData,\n        components: this.props.components,\n        icons: this.props.icons,\n        key: \"key-add-row\",\n        mode: \"add\",\n        localization: (0, _objectSpread2[\"default\"])({}, MTableBody.defaultProps.localization.editRow, this.props.localization.editRow),\n        options: this.props.options,\n        isTreeData: this.props.isTreeData,\n        detailPanel: this.props.detailPanel,\n        onEditingCanceled: this.props.onEditingCanceled,\n        onEditingApproved: this.props.onEditingApproved,\n        getFieldValue: this.props.getFieldValue\n      }), this.renderEmpty(emptyRowCount, renderData));\n    }\n  }]);\n  return MTableBody;\n}(React.Component);\n\nMTableBody.defaultProps = {\n  actions: [],\n  currentPage: 0,\n  pageSize: 5,\n  renderData: [],\n  selection: false,\n  localization: {\n    emptyDataSourceMessage: 'No records to display',\n    filterRow: {},\n    editRow: {}\n  }\n};\nMTableBody.propTypes = {\n  actions: _propTypes[\"default\"].array,\n  components: _propTypes[\"default\"].object.isRequired,\n  columns: _propTypes[\"default\"].array.isRequired,\n  currentPage: _propTypes[\"default\"].number,\n  detailPanel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].func, _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].func]))]),\n  getFieldValue: _propTypes[\"default\"].func.isRequired,\n  hasAnyEditingRow: _propTypes[\"default\"].bool,\n  hasDetailPanel: _propTypes[\"default\"].bool.isRequired,\n  icons: _propTypes[\"default\"].object.isRequired,\n  isTreeData: _propTypes[\"default\"].bool.isRequired,\n  onRowSelected: _propTypes[\"default\"].func,\n  options: _propTypes[\"default\"].object.isRequired,\n  pageSize: _propTypes[\"default\"].number,\n  renderData: _propTypes[\"default\"].array,\n  initialFormData: _propTypes[\"default\"].object,\n  selection: _propTypes[\"default\"].bool.isRequired,\n  showAddRow: _propTypes[\"default\"].bool,\n  treeDataMaxLevel: _propTypes[\"default\"].number,\n  localization: _propTypes[\"default\"].object,\n  onFilterChanged: _propTypes[\"default\"].func,\n  onGroupExpandChanged: _propTypes[\"default\"].func,\n  onToggleDetailPanel: _propTypes[\"default\"].func.isRequired,\n  onTreeExpandChanged: _propTypes[\"default\"].func.isRequired,\n  onRowClick: _propTypes[\"default\"].func,\n  onEditingCanceled: _propTypes[\"default\"].func,\n  onEditingApproved: _propTypes[\"default\"].func\n};\nvar _default = MTableBody;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}