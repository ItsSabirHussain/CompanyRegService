{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _format = _interopRequireDefault(require(\"date-fns/format\"));\n\nvar _2 = require(\"./\");\n\nvar DataManager =\n/*#__PURE__*/\nfunction () {\n  function DataManager() {\n    var _this = this;\n\n    (0, _classCallCheck2[\"default\"])(this, DataManager);\n    (0, _defineProperty2[\"default\"])(this, \"applyFilters\", false);\n    (0, _defineProperty2[\"default\"])(this, \"applySearch\", false);\n    (0, _defineProperty2[\"default\"])(this, \"currentPage\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"detailPanelType\", 'multiple');\n    (0, _defineProperty2[\"default\"])(this, \"lastDetailPanelRow\", undefined);\n    (0, _defineProperty2[\"default\"])(this, \"lastEditingRow\", undefined);\n    (0, _defineProperty2[\"default\"])(this, \"orderBy\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"orderDirection\", '');\n    (0, _defineProperty2[\"default\"])(this, \"pageSize\", 5);\n    (0, _defineProperty2[\"default\"])(this, \"paging\", true);\n    (0, _defineProperty2[\"default\"])(this, \"parentFunc\", null);\n    (0, _defineProperty2[\"default\"])(this, \"searchText\", '');\n    (0, _defineProperty2[\"default\"])(this, \"selectedCount\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"treefiedDataLength\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"treeDataMaxLevel\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"defaultExpanded\", false);\n    (0, _defineProperty2[\"default\"])(this, \"data\", []);\n    (0, _defineProperty2[\"default\"])(this, \"columns\", []);\n    (0, _defineProperty2[\"default\"])(this, \"filteredData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"searchedData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"groupedData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"treefiedData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"sortedData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"pagedData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"renderData\", []);\n    (0, _defineProperty2[\"default\"])(this, \"filtered\", false);\n    (0, _defineProperty2[\"default\"])(this, \"searched\", false);\n    (0, _defineProperty2[\"default\"])(this, \"grouped\", false);\n    (0, _defineProperty2[\"default\"])(this, \"treefied\", false);\n    (0, _defineProperty2[\"default\"])(this, \"sorted\", false);\n    (0, _defineProperty2[\"default\"])(this, \"paged\", false);\n    (0, _defineProperty2[\"default\"])(this, \"rootGroupsIndex\", {});\n    (0, _defineProperty2[\"default\"])(this, \"expandTreeForNodes\", function (data) {\n      data.forEach(function (row) {\n        var currentRow = row;\n\n        while (_this.parentFunc(currentRow, _this.data)) {\n          var parent = _this.parentFunc(currentRow, _this.data);\n\n          if (parent) {\n            parent.tableData.isTreeExpanded = true;\n          }\n\n          currentRow = parent;\n        }\n      });\n    });\n    (0, _defineProperty2[\"default\"])(this, \"findDataByPath\", function (renderData, path) {\n      if (_this.isDataType(\"tree\")) {\n        var node = path.reduce(function (result, current) {\n          return result && result.tableData && result.tableData.childRows && result.tableData.childRows[current];\n        }, {\n          tableData: {\n            childRows: renderData\n          }\n        });\n        return node;\n      } else {\n        var data = {\n          groups: renderData\n        };\n\n        var _node = path.reduce(function (result, current) {\n          if (result.groups.length > 0) {\n            return result.groups[current];\n          } else if (result.data) {\n            return result.data[current];\n          } else {\n            return undefined;\n          }\n        }, data);\n\n        return _node;\n      }\n    });\n    (0, _defineProperty2[\"default\"])(this, \"getFieldValue\", function (rowData, columnDef) {\n      var lookup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var value = typeof rowData[columnDef.field] !== 'undefined' ? rowData[columnDef.field] : (0, _2.byString)(rowData, columnDef.field);\n\n      if (columnDef.lookup && lookup) {\n        value = columnDef.lookup[value];\n      }\n\n      return value;\n    });\n    (0, _defineProperty2[\"default\"])(this, \"getRenderState\", function () {\n      if (_this.filtered === false) {\n        _this.filterData();\n      }\n\n      if (_this.searched === false) {\n        _this.searchData();\n      }\n\n      if (_this.grouped === false && _this.isDataType(\"group\")) {\n        _this.groupData();\n      }\n\n      if (_this.treefied === false && _this.isDataType(\"tree\")) {\n        _this.treefyData();\n      }\n\n      if (_this.sorted === false) {\n        _this.sortData();\n      }\n\n      if (_this.paged === false) {\n        _this.pageData();\n      }\n\n      return {\n        columns: _this.columns,\n        currentPage: _this.currentPage,\n        data: _this.sortedData,\n        lastEditingRow: _this.lastEditingRow,\n        orderBy: _this.orderBy,\n        orderDirection: _this.orderDirection,\n        originalData: _this.data,\n        pageSize: _this.pageSize,\n        renderData: _this.pagedData,\n        searchText: _this.searchText,\n        selectedCount: _this.selectedCount,\n        treefiedDataLength: _this.treefiedDataLength,\n        treeDataMaxLevel: _this.treeDataMaxLevel\n      };\n    });\n    (0, _defineProperty2[\"default\"])(this, \"filterData\", function () {\n      _this.searched = _this.grouped = _this.treefied = _this.sorted = _this.paged = false;\n      _this.filteredData = (0, _toConsumableArray2[\"default\"])(_this.data);\n\n      if (_this.applyFilters) {\n        _this.columns.filter(function (columnDef) {\n          return columnDef.tableData.filterValue;\n        }).forEach(function (columnDef) {\n          var lookup = columnDef.lookup,\n              type = columnDef.type,\n              tableData = columnDef.tableData;\n\n          if (columnDef.customFilterAndSearch) {\n            _this.filteredData = _this.filteredData.filter(function (row) {\n              return !!columnDef.customFilterAndSearch(tableData.filterValue, row, columnDef);\n            });\n          } else {\n            if (lookup) {\n              _this.filteredData = _this.filteredData.filter(function (row) {\n                var value = _this.getFieldValue(row, columnDef, false);\n\n                return !tableData.filterValue || tableData.filterValue.length === 0 || tableData.filterValue.indexOf(value !== undefined && value.toString()) > -1;\n              });\n            } else if (type === 'numeric') {\n              _this.filteredData = _this.filteredData.filter(function (row) {\n                var value = _this.getFieldValue(row, columnDef);\n\n                return value + \"\" === tableData.filterValue;\n              });\n            } else if (type === 'boolean' && tableData.filterValue) {\n              _this.filteredData = _this.filteredData.filter(function (row) {\n                var value = _this.getFieldValue(row, columnDef);\n\n                return value && tableData.filterValue === 'checked' || !value && tableData.filterValue === 'unchecked';\n              });\n            } else if (['date', 'datetime'].includes(type)) {\n              _this.filteredData = _this.filteredData.filter(function (row) {\n                var value = _this.getFieldValue(row, columnDef);\n\n                var currentDate = value ? new Date(value) : null;\n\n                if (currentDate && currentDate.toString() !== 'Invalid Date') {\n                  var selectedDate = tableData.filterValue;\n                  var currentDateToCompare = '';\n                  var selectedDateToCompare = '';\n\n                  if (type === 'date') {\n                    currentDateToCompare = (0, _format[\"default\"])(currentDate, 'MM/dd/yyyy');\n                    selectedDateToCompare = (0, _format[\"default\"])(selectedDate, 'MM/dd/yyyy');\n                  } else if (type === 'datetime') {\n                    currentDateToCompare = (0, _format[\"default\"])(currentDate, 'MM/dd/yyyy - HH:mm');\n                    selectedDateToCompare = (0, _format[\"default\"])(selectedDate, 'MM/dd/yyyy - HH:mm');\n                  }\n\n                  return currentDateToCompare === selectedDateToCompare;\n                }\n\n                return true;\n              });\n            } else if (type === 'time') {\n              _this.filteredData = _this.filteredData.filter(function (row) {\n                var value = _this.getFieldValue(row, columnDef);\n\n                var currentHour = value || null;\n\n                if (currentHour) {\n                  var selectedHour = tableData.filterValue;\n                  var currentHourToCompare = (0, _format[\"default\"])(selectedHour, 'HH:mm');\n                  return currentHour === currentHourToCompare;\n                }\n\n                return true;\n              });\n            } else {\n              _this.filteredData = _this.filteredData.filter(function (row) {\n                var value = _this.getFieldValue(row, columnDef);\n\n                return value && value.toString().toUpperCase().includes(tableData.filterValue.toUpperCase());\n              });\n            }\n          }\n        });\n      }\n\n      _this.filtered = true;\n    });\n    (0, _defineProperty2[\"default\"])(this, \"searchData\", function () {\n      _this.grouped = _this.treefied = _this.sorted = _this.paged = false;\n      _this.searchedData = (0, _toConsumableArray2[\"default\"])(_this.filteredData);\n\n      if (_this.searchText && _this.applySearch) {\n        _this.searchedData = _this.searchedData.filter(function (row) {\n          return _this.columns.filter(function (columnDef) {\n            return columnDef.searchable === undefined ? !columnDef.hidden : columnDef.searchable;\n          }).some(function (columnDef) {\n            if (columnDef.customFilterAndSearch) {\n              return !!columnDef.customFilterAndSearch(_this.searchText, row, columnDef);\n            } else if (columnDef.field) {\n              var value = _this.getFieldValue(row, columnDef);\n\n              if (value) {\n                return value.toString().toUpperCase().includes(_this.searchText.toUpperCase());\n              }\n            }\n          });\n        });\n      }\n\n      _this.searched = true;\n    });\n  }\n\n  (0, _createClass2[\"default\"])(DataManager, [{\n    key: \"setData\",\n    value: function setData(data) {\n      var _this2 = this;\n\n      this.selectedCount = 0;\n      this.data = data.map(function (row, index) {\n        row.tableData = (0, _objectSpread2[\"default\"])({}, row.tableData, {\n          id: index\n        });\n\n        if (row.tableData.checked) {\n          _this2.selectedCount++;\n        }\n\n        return row;\n      });\n      this.filtered = false;\n    }\n  }, {\n    key: \"setColumns\",\n    value: function setColumns(columns) {\n      this.columns = columns.map(function (columnDef, index) {\n        columnDef.tableData = (0, _objectSpread2[\"default\"])({\n          columnOrder: index,\n          filterValue: columnDef.defaultFilter,\n          groupOrder: columnDef.defaultGroupOrder,\n          groupSort: columnDef.defaultGroupSort || 'asc'\n        }, columnDef.tableData, {\n          id: index\n        });\n        return columnDef;\n      });\n    }\n  }, {\n    key: \"setDefaultExpanded\",\n    value: function setDefaultExpanded(expanded) {\n      this.defaultExpanded = expanded;\n    }\n  }, {\n    key: \"changeApplySearch\",\n    value: function changeApplySearch(applySearch) {\n      this.applySearch = applySearch;\n      this.searched = false;\n    }\n  }, {\n    key: \"changeApplyFilters\",\n    value: function changeApplyFilters(applyFilters) {\n      this.applyFilters = applyFilters;\n      this.filtered = false;\n    }\n  }, {\n    key: \"changePaging\",\n    value: function changePaging(paging) {\n      this.paging = paging;\n      this.paged = false;\n    }\n  }, {\n    key: \"changeCurrentPage\",\n    value: function changeCurrentPage(currentPage) {\n      this.currentPage = currentPage;\n      this.paged = false;\n    }\n  }, {\n    key: \"changePageSize\",\n    value: function changePageSize(pageSize) {\n      this.pageSize = pageSize;\n      this.paged = false;\n    }\n  }, {\n    key: \"changeParentFunc\",\n    value: function changeParentFunc(parentFunc) {\n      this.parentFunc = parentFunc;\n    }\n  }, {\n    key: \"changeFilterValue\",\n    value: function changeFilterValue(columnId, value) {\n      this.columns[columnId].tableData.filterValue = value;\n      this.filtered = false;\n    }\n  }, {\n    key: \"changeRowSelected\",\n    value: function changeRowSelected(checked, path) {\n      var _this3 = this;\n\n      var rowData = this.findDataByPath(this.sortedData, path);\n      rowData.tableData.checked = checked;\n      this.selectedCount = this.selectedCount + (checked ? 1 : -1);\n\n      var checkChildRows = function checkChildRows(rowData) {\n        if (rowData.tableData.childRows) {\n          rowData.tableData.childRows.forEach(function (childRow) {\n            if (childRow.tableData.checked !== checked) {\n              childRow.tableData.checked = checked;\n              _this3.selectedCount = _this3.selectedCount + (checked ? 1 : -1);\n            }\n\n            checkChildRows(childRow);\n          });\n        }\n      };\n\n      checkChildRows(rowData);\n      this.filtered = false;\n    }\n  }, {\n    key: \"changeDetailPanelVisibility\",\n    value: function changeDetailPanelVisibility(path, render) {\n      var rowData = this.findDataByPath(this.sortedData, path);\n\n      if ((rowData.tableData.showDetailPanel || '').toString() === render.toString()) {\n        rowData.tableData.showDetailPanel = undefined;\n      } else {\n        rowData.tableData.showDetailPanel = render;\n      }\n\n      if (this.detailPanelType === 'single' && this.lastDetailPanelRow && this.lastDetailPanelRow != rowData) {\n        this.lastDetailPanelRow.tableData.showDetailPanel = undefined;\n      }\n\n      this.lastDetailPanelRow = rowData;\n    }\n  }, {\n    key: \"changeGroupExpand\",\n    value: function changeGroupExpand(path) {\n      var rowData = this.findDataByPath(this.sortedData, path);\n      rowData.isExpanded = !rowData.isExpanded;\n    }\n  }, {\n    key: \"changeSearchText\",\n    value: function changeSearchText(searchText) {\n      this.searchText = searchText;\n      this.searched = false;\n      this.currentPage = 0;\n    }\n  }, {\n    key: \"changeRowEditing\",\n    value: function changeRowEditing(rowData, mode) {\n      if (rowData) {\n        rowData.tableData.editing = mode;\n\n        if (this.lastEditingRow && this.lastEditingRow != rowData) {\n          this.lastEditingRow.tableData.editing = undefined;\n        }\n\n        if (mode) {\n          this.lastEditingRow = rowData;\n        } else {\n          this.lastEditingRow = undefined;\n        }\n      } else if (this.lastEditingRow) {\n        this.lastEditingRow.tableData.editing = undefined;\n        this.lastEditingRow = undefined;\n      }\n    }\n  }, {\n    key: \"changeAllSelected\",\n    value: function changeAllSelected(checked) {\n      var selectedCount = 0;\n\n      if (this.isDataType(\"group\")) {\n        var setCheck = function setCheck(data) {\n          data.forEach(function (element) {\n            if (element.groups.length > 0) {\n              setCheck(element.groups);\n            } else {\n              element.data.forEach(function (d) {\n                d.tableData.checked = checked;\n                selectedCount++;\n              });\n            }\n          });\n        };\n\n        setCheck(this.groupedData);\n      } else {\n        this.searchedData.map(function (row) {\n          row.tableData.checked = checked;\n          return row;\n        });\n        selectedCount = this.searchedData.length;\n      }\n\n      this.selectedCount = checked ? selectedCount : 0;\n    }\n  }, {\n    key: \"changeOrder\",\n    value: function changeOrder(orderBy, orderDirection) {\n      this.orderBy = orderBy;\n      this.orderDirection = orderDirection;\n      this.currentPage = 0;\n      this.sorted = false;\n    }\n  }, {\n    key: \"changeGroupOrder\",\n    value: function changeGroupOrder(columnId) {\n      var column = this.columns.find(function (c) {\n        return c.tableData.id === columnId;\n      });\n\n      if (column.tableData.groupSort === 'asc') {\n        column.tableData.groupSort = 'desc';\n      } else {\n        column.tableData.groupSort = 'asc';\n      }\n\n      this.sorted = false;\n    }\n  }, {\n    key: \"changeColumnHidden\",\n    value: function changeColumnHidden(column, hidden) {\n      column.hidden = hidden;\n    }\n  }, {\n    key: \"changeTreeExpand\",\n    value: function changeTreeExpand(path) {\n      var rowData = this.findDataByPath(this.sortedData, path);\n      rowData.tableData.isTreeExpanded = !rowData.tableData.isTreeExpanded;\n    }\n  }, {\n    key: \"changeDetailPanelType\",\n    value: function changeDetailPanelType(type) {\n      this.detailPanelType = type;\n    }\n  }, {\n    key: \"changeByDrag\",\n    value: function changeByDrag(result) {\n      var start = 0;\n      var groups = this.columns.filter(function (col) {\n        return col.tableData.groupOrder > -1;\n      }).sort(function (col1, col2) {\n        return col1.tableData.groupOrder - col2.tableData.groupOrder;\n      });\n\n      if (result.destination.droppableId === \"groups\" && result.source.droppableId === \"groups\") {\n        start = Math.min(result.destination.index, result.source.index);\n        var end = Math.max(result.destination.index, result.source.index);\n        groups = groups.slice(start, end + 1);\n\n        if (result.destination.index < result.source.index) {\n          // Take last and add as first\n          var last = groups.pop();\n          groups.unshift(last);\n        } else {\n          // Take first and add as last\n          var _last = groups.shift();\n\n          groups.push(_last);\n        }\n      } else if (result.destination.droppableId === \"groups\" && result.source.droppableId === \"headers\") {\n        var newGroup = this.columns.find(function (c) {\n          return c.tableData.id == result.draggableId;\n        });\n\n        if (newGroup.grouping === false || !newGroup.field) {\n          return;\n        }\n\n        groups.splice(result.destination.index, 0, newGroup);\n      } else if (result.destination.droppableId === \"headers\" && result.source.droppableId === \"groups\") {\n        var removeGroup = this.columns.find(function (c) {\n          return c.tableData.id == result.draggableId;\n        });\n        removeGroup.tableData.groupOrder = undefined;\n        groups.splice(result.source.index, 1);\n      } else if (result.destination.droppableId === \"headers\" && result.source.droppableId === \"headers\") {\n        start = Math.min(result.destination.index, result.source.index);\n\n        var _end = Math.max(result.destination.index, result.source.index);\n\n        var colsToMov = this.columns.sort(function (a, b) {\n          return a.tableData.columnOrder - b.tableData.columnOrder;\n        }).filter(function (column) {\n          return column.tableData.groupOrder === undefined;\n        }).slice(start, _end + 1);\n\n        if (result.destination.index < result.source.index) {\n          // Take last and add as first\n          var _last2 = colsToMov.pop();\n\n          colsToMov.unshift(_last2);\n        } else {\n          // Take first and add as last\n          var _last3 = colsToMov.shift();\n\n          colsToMov.push(_last3);\n        }\n\n        for (var i = 0; i < colsToMov.length; i++) {\n          colsToMov[i].tableData.columnOrder = start + i;\n        }\n\n        return;\n      } else {\n        return;\n      }\n\n      for (var _i = 0; _i < groups.length; _i++) {\n        groups[_i].tableData.groupOrder = start + _i;\n      }\n\n      this.sorted = this.grouped = false;\n    }\n  }, {\n    key: \"findGroupByGroupPath\",\n    value: function findGroupByGroupPath(renderData, path) {\n      var data = {\n        groups: renderData,\n        groupsIndex: this.rootGroupsIndex\n      };\n      var node = path.reduce(function (result, current) {\n        if (!result) {\n          return undefined;\n        }\n\n        if (result.groupsIndex[current] !== undefined) {\n          return result.groups[result.groupsIndex[current]];\n        }\n\n        return undefined; // const group = result.groups.find(a => a.value === current);\n        // return group;\n      }, data);\n      return node;\n    }\n  }, {\n    key: \"isDataType\",\n    value: function isDataType(type) {\n      var dataType = \"normal\";\n\n      if (this.parentFunc) {\n        dataType = \"tree\";\n      } else if (this.columns.find(function (a) {\n        return a.tableData.groupOrder > -1;\n      })) {\n        dataType = \"group\";\n      }\n\n      return type === dataType;\n    }\n  }, {\n    key: \"sort\",\n    value: function sort(a, b, type) {\n      if (type === 'numeric') {\n        return a - b;\n      } else {\n        if (a !== b) {\n          // to find nulls\n          if (!a) return -1;\n          if (!b) return 1;\n        }\n\n        return a < b ? -1 : a > b ? 1 : 0;\n      }\n    }\n  }, {\n    key: \"sortList\",\n    value: function sortList(list) {\n      var _this4 = this;\n\n      var columnDef = this.columns.find(function (_) {\n        return _.tableData.id === _this4.orderBy;\n      });\n      var result = list;\n\n      if (columnDef.customSort) {\n        if (this.orderDirection === 'desc') {\n          result = list.sort(function (a, b) {\n            return columnDef.customSort(b, a, 'row');\n          });\n        } else {\n          result = list.sort(function (a, b) {\n            return columnDef.customSort(a, b, 'row');\n          });\n        }\n      } else {\n        result = list.sort(this.orderDirection === 'desc' ? function (a, b) {\n          return _this4.sort(_this4.getFieldValue(b, columnDef), _this4.getFieldValue(a, columnDef), columnDef.type);\n        } : function (a, b) {\n          return _this4.sort(_this4.getFieldValue(a, columnDef), _this4.getFieldValue(b, columnDef), columnDef.type);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"groupData\",\n    value: function groupData() {\n      var _this5 = this;\n\n      this.sorted = this.paged = false;\n      var tmpData = (0, _toConsumableArray2[\"default\"])(this.searchedData);\n      var groups = this.columns.filter(function (col) {\n        return col.tableData.groupOrder > -1;\n      }).sort(function (col1, col2) {\n        return col1.tableData.groupOrder - col2.tableData.groupOrder;\n      });\n      var subData = tmpData.reduce(function (result, currentRow) {\n        var object = result;\n        object = groups.reduce(function (o, colDef) {\n          var value = currentRow[colDef.field] || (0, _2.byString)(currentRow, colDef.field);\n          var group;\n\n          if (o.groupsIndex[value] !== undefined) {\n            group = o.groups[o.groupsIndex[value]];\n          }\n\n          if (!group) {\n            var path = [].concat((0, _toConsumableArray2[\"default\"])(o.path || []), [value]);\n            var oldGroup = _this5.findGroupByGroupPath(_this5.groupedData, path) || {\n              isExpanded: _this5.defaultExpanded ? true : false\n            };\n            group = {\n              value: value,\n              groups: [],\n              groupsIndex: {},\n              data: [],\n              isExpanded: oldGroup.isExpanded,\n              path: path\n            };\n            o.groups.push(group);\n            o.groupsIndex[value] = o.groups.length - 1;\n          }\n\n          return group;\n        }, object);\n        object.data.push(currentRow);\n        return result;\n      }, {\n        groups: [],\n        groupsIndex: {}\n      });\n      this.groupedData = subData.groups;\n      this.grouped = true;\n      this.rootGroupsIndex = subData.groupsIndex;\n    }\n  }, {\n    key: \"treefyData\",\n    value: function treefyData() {\n      var _this6 = this;\n\n      this.sorted = this.paged = false;\n      this.data.forEach(function (a) {\n        return a.tableData.childRows = null;\n      });\n      this.treefiedData = [];\n      this.treefiedDataLength = 0;\n      this.treeDataMaxLevel = 0; // if filter or search is enabled, collapse the tree\n\n      if (this.searchText || this.columns.some(function (columnDef) {\n        return columnDef.tableData.filterValue;\n      })) {\n        this.data.forEach(function (row) {\n          row.tableData.isTreeExpanded = false;\n        }); // expand the tree for all nodes present after filtering and searching\n\n        this.expandTreeForNodes(this.searchedData);\n      }\n\n      var addRow = function addRow(rowData) {\n        rowData.tableData.markedForTreeRemove = false;\n\n        var parent = _this6.parentFunc(rowData, _this6.data);\n\n        if (parent) {\n          parent.tableData.childRows = parent.tableData.childRows || [];\n\n          if (!parent.tableData.childRows.includes(rowData)) {\n            parent.tableData.childRows.push(rowData);\n            _this6.treefiedDataLength++;\n          }\n\n          addRow(parent);\n          rowData.tableData.path = [].concat((0, _toConsumableArray2[\"default\"])(parent.tableData.path), [parent.tableData.childRows.length - 1]);\n          _this6.treeDataMaxLevel = Math.max(_this6.treeDataMaxLevel, rowData.tableData.path.length);\n        } else {\n          if (!_this6.treefiedData.includes(rowData)) {\n            _this6.treefiedData.push(rowData);\n\n            _this6.treefiedDataLength++;\n            rowData.tableData.path = [_this6.treefiedData.length - 1];\n          }\n        }\n      }; // Add all rows initially\n\n\n      this.data.forEach(function (rowData) {\n        addRow(rowData);\n      });\n\n      var markForTreeRemove = function markForTreeRemove(rowData) {\n        var pointer = _this6.treefiedData;\n        rowData.tableData.path.forEach(function (pathPart) {\n          if (pointer.tableData && pointer.tableData.childRows) {\n            pointer = pointer.tableData.childRows;\n          }\n\n          pointer = pointer[pathPart];\n        });\n        pointer.tableData.markedForTreeRemove = true;\n      };\n\n      var traverseChildrenAndUnmark = function traverseChildrenAndUnmark(rowData) {\n        if (rowData.tableData.childRows) {\n          rowData.tableData.childRows.forEach(function (row) {\n            traverseChildrenAndUnmark(row);\n          });\n        }\n\n        rowData.tableData.markedForTreeRemove = false;\n      }; // for all data rows, restore initial expand if no search term is available and remove items that shouldn't be there\n\n\n      this.data.forEach(function (rowData) {\n        if (!_this6.searchText && !_this6.columns.some(function (columnDef) {\n          return columnDef.tableData.filterValue;\n        })) {\n          rowData.tableData.isTreeExpanded = rowData.tableData.isTreeExpanded === undefined ? _this6.defaultExpanded : rowData.tableData.isTreeExpanded;\n        }\n\n        var hasSearchMatchedChildren = rowData.tableData.isTreeExpanded;\n\n        if (!hasSearchMatchedChildren && _this6.searchedData.indexOf(rowData) < 0) {\n          markForTreeRemove(rowData);\n        }\n      }); // preserve all children of nodes that are matched by search or filters\n\n      this.data.forEach(function (rowData) {\n        if (_this6.searchedData.indexOf(rowData) > -1) {\n          traverseChildrenAndUnmark(rowData);\n        }\n      });\n\n      var traverseTreeAndDeleteMarked = function traverseTreeAndDeleteMarked(rowDataArray) {\n        for (var i = rowDataArray.length - 1; i >= 0; i--) {\n          var item = rowDataArray[i];\n\n          if (item.tableData.childRows) {\n            traverseTreeAndDeleteMarked(item.tableData.childRows);\n          }\n\n          if (item.tableData.markedForTreeRemove) rowDataArray.splice(i, 1);\n        }\n      };\n\n      traverseTreeAndDeleteMarked(this.treefiedData);\n      this.treefied = true;\n    }\n  }, {\n    key: \"sortData\",\n    value: function sortData() {\n      var _this7 = this;\n\n      this.paged = false;\n\n      if (this.isDataType(\"group\")) {\n        this.sortedData = (0, _toConsumableArray2[\"default\"])(this.groupedData);\n        var groups = this.columns.filter(function (col) {\n          return col.tableData.groupOrder > -1;\n        }).sort(function (col1, col2) {\n          return col1.tableData.groupOrder - col2.tableData.groupOrder;\n        });\n\n        var sortGroups = function sortGroups(list, columnDef) {\n          if (columnDef.customSort) {\n            return list.sort(columnDef.tableData.groupSort === 'desc' ? function (a, b) {\n              return columnDef.customSort(b.value, a.value, 'group');\n            } : function (a, b) {\n              return columnDef.customSort(a.value, b.value, 'group');\n            });\n          } else {\n            return list.sort(columnDef.tableData.groupSort === 'desc' ? function (a, b) {\n              return _this7.sort(b.value, a.value, columnDef.type);\n            } : function (a, b) {\n              return _this7.sort(a.value, b.value, columnDef.type);\n            });\n          }\n        };\n\n        this.sortedData = sortGroups(this.sortedData, groups[0]);\n\n        var sortGroupData = function sortGroupData(list, level) {\n          list.forEach(function (element) {\n            if (element.groups.length > 0) {\n              var column = groups[level];\n              element.groups = sortGroups(element.groups, column);\n              sortGroupData(element.groups, level + 1);\n            } else {\n              if (_this7.orderBy >= 0 && _this7.orderDirection) {\n                element.data = _this7.sortList(element.data);\n              }\n            }\n          });\n        };\n\n        sortGroupData(this.sortedData, 1);\n      } else if (this.isDataType(\"tree\")) {\n        this.sortedData = (0, _toConsumableArray2[\"default\"])(this.treefiedData);\n\n        if (this.orderBy != -1) {\n          this.sortedData = this.sortList(this.sortedData);\n\n          var sortTree = function sortTree(list) {\n            list.forEach(function (item) {\n              if (item.tableData.childRows) {\n                item.tableData.childRows = _this7.sortList(item.tableData.childRows);\n                sortTree(item.tableData.childRows);\n              }\n            });\n          };\n\n          sortTree(this.sortedData);\n        }\n      } else if (this.isDataType(\"normal\")) {\n        this.sortedData = (0, _toConsumableArray2[\"default\"])(this.searchedData);\n\n        if (this.orderBy != -1) {\n          this.sortedData = this.sortList(this.sortedData);\n        }\n      }\n\n      this.sorted = true;\n    }\n  }, {\n    key: \"pageData\",\n    value: function pageData() {\n      this.pagedData = (0, _toConsumableArray2[\"default\"])(this.sortedData);\n\n      if (this.paging) {\n        var startIndex = this.currentPage * this.pageSize;\n        var endIndex = startIndex + this.pageSize;\n        this.pagedData = this.pagedData.slice(startIndex, endIndex);\n      }\n\n      this.paged = true;\n    }\n  }]);\n  return DataManager;\n}();\n\nexports[\"default\"] = DataManager;","map":null,"metadata":{},"sourceType":"script"}